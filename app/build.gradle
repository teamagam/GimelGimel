apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

configurations.all {
  resolutionStrategy {
    force 'com.google.guava:guava:19.0'
  }
  resolutionStrategy.eachDependency { DependencyResolveDetails details ->
    def requested = details.requested
    if (requested.group == 'com.android.support') {
      if (!requested.name.startsWith("multidex")) {
        details.useVersion rootProject.ext.androidSupportVersion
      }
    }
  }
}

android {

  def globalConfiguration = rootProject.ext

  compileSdkVersion globalConfiguration.androidCompileSdkVersion
  buildToolsVersion globalConfiguration.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion globalConfiguration.androidMinSdkVersion
    targetSdkVersion globalConfiguration.androidTargetSdkVersion
    applicationId globalConfiguration.androidApplicationId
    versionCode globalConfiguration.androidVersionCode
    versionName globalConfiguration.androidVersionName
    multiDexEnabled true
    vectorDrawables.useSupportLibrary true
  }

  signingConfigs {
    release {
      keyAlias 'ggapp'
      keyPassword 'teamagam1'
      storePassword 'teamagam1'
      storeFile file('../keystores/gimelgimel.jks')
    }
  }

  buildTypes {
    release {
      signingConfig signingConfigs.release

      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    debug {
      signingConfig signingConfigs.debug
      applicationIdSuffix ".debug"

      // Run code coverage reports by default on debug builds.
      testCoverageEnabled = false
    }
  }

  dataBinding {
    enabled = true
  }

  /* ESRI + rxjava recommended packaging options to avoid build errors */
  packagingOptions {
    exclude 'META-INF/LGPL2.1'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'

    exclude 'META-INF/rxjava.properties'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

dependencies {
  def dependencies = rootProject.ext.dependencies
  def testDependencies = rootProject.ext.testDependencies
  /*ESRI*/
  compile dependencies.esri
  compile project(path: ':domain')
  compile project(path: ':data')
  /* android design */
  compile dependencies.androidSupportCore
  compile dependencies.androidSupportCoreUi
  compile dependencies.androidSuppotCompat
  compile dependencies.androidSupportAppCompat
  compile dependencies.androidSupportFragment
  compile dependencies.androidSupportDesign
  compile dependencies.androidAnnotations
  compile dependencies.recyclerview
  compile dependencies.cardView
  compile dependencies.slideUpPannel
  compile dependencies.multiDex
  compile dependencies.pagerSlidingTabStrip
  compile dependencies.keyboardVisibilityEvent
  compile dependencies.boomMenu
  compile dependencies.autoFitTextView
  compile dependencies.constraintLayout
  /* rx */
  compile dependencies.rxAndroid
  /* Dagger 2 */
  compile dependencies.dagger
  annotationProcessor dependencies.daggerCompiler
  provided dependencies.javaxAnnotations
  provided dependencies.autoFactoryCompiler
  /* Butterknife */
  compile dependencies.butterKnife
  annotationProcessor dependencies.butterKnifeCompiler
  /* Glide */
  compile dependencies.glide
  compile dependencies.glideOkHttp
  /* log4j */
  compile dependencies.log4jLogging
  compile dependencies.log4jAppache
  /* Circular Progress */
  compile dependencies.circularProgress
  /* Color Picker */
  compile dependencies.colorPicker
  /* ImageViewZoom */
  compile dependencies.imageViewZoom
  /* Alerter */
  compile dependencies.alerter
  /* Compressor */
  compile dependencies.compressor
  /* Navigation Tab Bar */
  compile dependencies.navigationTabBar
  /* Bottom Bar */
  compile dependencies.bottomBar
  /* Test */
  testCompile testDependencies.junit
  testCompile testDependencies.roboelectric
  testCompile testDependencies.mockito
  /* Android Test */
  androidTestCompile testDependencies.robotium
  androidTestCompile 'org.testng:testng:6.9.6'
}

android {
  // Always show the result of every unit test, even if it passes.
  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }
  }
}


